<!--TeddyBear Demo for CS307
    Author: Stephanie Contreras
    Date: July 21, 2014

    Updated to use nested frames by Scott D. Anderson

-->

<html>
  <head>
    <title>The Teddy Bear</title>
    <style>
      body { margin: 10px; }
      canvas { width: 100%; height: 100% }
    </style>
    <link rel="stylesheet" type="text/css" href="../../307.css">
    <link rel="stylesheet" type="text/css" href="https://cs.wellesley.edu/~cs307/js/google-code-prettify/prettify-sda.css">
    <script src="../libs/three.min.js"></script>
    <script src="../libs/tw.js"></script>
    <script src="../libs/OrbitControls.js"></script>
    <script src="../libs/dat.gui.min.js"></script>
  </head>
<body>

<h1>Teddy Bear</h1>

<script>
"use strict";

var renderer = new THREE.WebGLRenderer();

var scene = new THREE.Scene();

TW.mainInit(renderer,scene);
                        
var params = new TW.TeddyBearParams();

// New materials
params.bodyMaterial = new THREE.MeshLambertMaterial(
    {color: params.bodyColor,
     // Three.js removed this in 2015
     // ambient: params.bodyColor,
    } );
params.headMaterial = new THREE.MeshLambertMaterial( {color: params.headColor});
params.blackMaterial = new THREE.MeshPhongMaterial(
    {color: TW.BLACK,
     // ambient: TW.BLACK,
     specular: TW.WHITE} );


params.ambientLightOn = true;
params.upperLeftLightOn = true;
params.overheadLightOn = true;

var light0, light1, light2;

function makeLights() {
    // we're using globals for the lights, for the GUI

    light0 = new THREE.AmbientLight( 0x202020 ); // 10%
    scene.add(light0);

    light1 = new THREE.PointLight( TW.WHITE, 0.5 ); // 50%
    light1.position.set( -12, 15, 10 );
    scene.add(light1);

    light2 = new THREE.DirectionalLight( TW.WHITE, 0.3 );
    light2.position.set( 0, 100, 10 );
    scene.add(light2);
}
makeLights();
    
var light1helper, light2helper;

function addLightHelpers() {
    light1helper = new THREE.PointLightHelper(light1, 0.2);
    scene.add(light1helper);
    light2helper = new THREE.DirectionalLightHelper(light2, 1);
    scene.add(light2helper);
}
addLightHelpers();

function updateLightsFromParams() {
    // in case we are re-making the lights, remove the old ones
    scene.remove(light0);
    scene.remove(light1);
    scene.remove(light2);
    scene.remove(light1helper);
    scene.remove(light2helper);

    // add back in the lights that we want
    if( params.ambientLightOn ) {
        scene.add(light0);
    }
    if( params.upperLeftLightOn ) {
        scene.add(light1);
        scene.add(light1helper);
    }
    if( params.overheadLightOn ) {
        scene.add(light2);
        scene.add(light2helper);
    }
}



updateLightsFromParams();



var bear = TW.createTeddyBear(params);

scene.add(bear);

var state = TW.cameraSetup(renderer,
               scene,
               {minx: -5, maxx: 5,
                miny: -10, maxy: 15,
                minz: -5, maxz: 5});
TW.toggleAxes("show");
TW.viewFromAboveFrontSide();

TW.setKeyboardCallback("w",
                       function () {
                           params.wireframe = !params.wireframe;
                           params.bodyMaterial.wireframe = params.wireframe;
                           params.headMaterial.wireframe = params.wireframe;
                           state.render();
                       },
                       "toggle wireframe");

// ================================================================

// when true, objects are drawn in wireframe
var wireframe = false;

// More bear params

params.bodyColor = 0xD08050;
params.headColor = 0xB07040;   // like body but slightly darker
params.blackColor = 0x000000;
params.lambert = false;
params.phong = false;

function redoMaterials() {
    if( params.phong ) {
        params.bodyMaterial = new THREE.MeshPhongMaterial({color: params.bodyColor}),
        params.headMaterial = new THREE.MeshPhongMaterial({color: params.headColor});
        params.blackMaterial = new THREE.MeshPhongMaterial({color: params.blackColor});
    } else if( lambert ) {
        params.bodyMaterial = new THREE.MeshLambertMaterial({color: params.bodyColor}),
        params.headMaterial = new THREE.MeshLambertMaterial({color: params.headColor});
        params.blackMaterial = new THREE.MeshLambertMaterial({color: params.blackColor});
    } else {        
        params.bodyMaterial = new THREE.MeshBasicMaterial({color: params.bodyColor}),
        params.headMaterial = new THREE.MeshBasicMaterial({color: params.headColor});
        params.blackMaterial = new THREE.MeshBasicMaterial({color: params.blackColor});
    }
    params.bodyMaterial.wireframe = params.wireframe;
    params.headMaterial.wireframe = params.wireframe;
}

function rebuild() {
    redoMaterials();
    scene.remove(bear);
    bear = TW.createTeddyBear(params);
    scene.add(bear);
    state.render();
}

function redo() {
    updateLightsFromParams();
    TW.render();
}

// ================================================================
var gui = new dat.GUI();
gui.add(params, 'ambientLightOn' ).onChange(redo);
gui.add(params, 'upperLeftLightOn' ).onChange(redo);
gui.add(params, 'overheadLightOn' ).onChange(redo);
</script>

<h2>Code</h2>

<p>The code for the lights:

<pre data-code-jsfunction="makeLights" class="prettyprint lang-js linenums">
</pre>  


<div id="footer">
<p>&copy; Scott D. Anderson<br>
This work is licensed under a <a rel="license"
href="http://creativecommons.org/licenses/by-nc-sa/1.0/">Creative Commons License</a> <br>
Date Modified: 
<!--#echo var="LAST_MODIFIED" -->

<!-- Creative Commons License -->
<ul id="iconlist">
<li>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/1.0/"><img
       alt="Creative Commons License" 
       src="/~cs110/cache/somerights.gif"></a> 
       <!-- /Creative Commons License -->
</li>

<li>
  <a href="http://www.anybrowser.org/campaign/"><img
       src="/~cs110/cache/enhanced.gif" 
       width="96" height="32" 
       alt="Viewable With Any Browser">
  </a> 
</li>

<li>
  <a href="http://validator.w3.org/check?uri=referer"><img 
       src="/~cs110/cache/valid-html401.png"
       alt="Valid HTML 4.01 Strict"
       title="Valid HTML 4.01 Strict"  
       height="31" width="88">
  </a> 
</li>

<li>
  <a href="http://jigsaw.w3.org/css-validator/check/referer"><img 
      style="border:0;width:88px;height:31px"
      src="/~cs110/cache/vcss.gif"
      alt="Valid CSS!">
 </a>
</li>

</ul>
</div> <!-- <div id="footer"> -->

<script src="//code.jquery.com/jquery-2.1.1.min.js"></script>
<!--
<script type="text/JavaScript" src="/~cs110/js/shjs-0.6/sh_main.js"></script>
<script type="text/JavaScript" src="/~cs110/js/shjs-0.6/lang/sh_python.js"></script>
<script type="text/JavaScript" src="/~cs110/js/shjs-0.6/lang/sh_javascript.js"></script>
-->
<script src="/~cs307/js/google-code-prettify/prettify.js"></script>
<script type="text/JavaScript" src="/~cs307/js/TOC.js"></script>
<script type="text/JavaScript" src="/~cs307/js/307.js"></script>
<script>
addExecuteButtons();
handle_codefrom();
handle_code_jsfunction();
handle_codeurl();
prettyPrint();
$("h2,h3").click(gohere);
$(".code_solution").click(checkMagicWord);
$(".code_solution > * ").hide();
$(".code_solution").attr('data-shown','no');
</script>


</body>
</html>
